DAY - 1 -> INTRODUCTION TO Javascript

What is Javascript - 
=>  A high-level, interpreted programming language used to add interactivity and dynamic behaviour to the web pages.
    It allows developers to implement complex features such as form validation, animations, event handling etc.

    JavaScript is versatile because it can run both on the client-side and the server-side.

Variables?
=>  Variables are containers for storing data values.
    In JavaScript, variables are declared using keywords like var, let, and const. Each serves a different purpose:

    a. var has function scope and was traditionally used.
    b. let has block-level scope.
    c. const is used to declare variables that won’t be reassigned, though the data inside can still be mutable if it’s an object or array.

Data Types?
=>  Data types are the type of data that can be used in javascript. They are :-
        String (e.g., "Hello, World!")
        Number (e.g., 42, 3.14)
        Bigint
        Boolean (e.g., true, false)
        Undefined (a variable declared but not assigned a value)
        Null (intentionally empty value)
        Symbol
        Object (e.g., {name: 'John', age: 30})

Operators?
=>  Operators are the symbols used to perform operations on variables and values. The following are the type of operators:
        
        Arithmetic Operators - +, -, *, /, %, ++, --, ** (exponentiation).

        Assignment Operators - =, +=, -=, *=, /=, %=, **=.

        Comparison Operators - ==(equal to), ===(equal value and equal type), !=, !==(not equal value and not equal type), >, <, >=, <=, ?(ternary oprator)

        String Operators - "+" operator is used to add/ concatenate two strings.

        Logical Operators - &&, ||, !.

        Bitwise Operators - &, |, ~, ^, <<, >>, >>>(unsigned right shift).

        Ternary Operator - (condition) ? (true - statements) : (false - statements)

        Type Operators - typeof, instanceof

Functions?
=>  A function is a reuseable block of code designed to perform particular task. Instead of writing the same code multiple times, functions allow you to write a set of instructions once and reuse it whenever needed. Functions can take inputs called parameters, and return an output.

Basic Syntax of a Function
    function functionName(parameters) {
    // function body
    return value; // (optional)
    }

    e.g., 
        function addNumbers(a, b) {
            return a + b;
        }

        console.log(addNumbers(5, 3)); // Outputs: 8


Types of function:
    1. Function Declaration (Named Functions): 
        You give the function a name so it can be called later.

    2. Function expression: 
        Involves defining a function and assigning it to a variable.
        These functions are anonymous (unnamed) and invoked using the variable name.

        e.g., 
            const multiply = function(a, b) {
                return a * b;
            };

            console.log(multiply(4, 5));  // Outputs: 20

    3. Arrow Function: 
        1. Arrow functions were introduced in ES6.
        2. Arrow functions allow us to write shorter function syntax:

        syntax: 
            const functionName = (parameters) => {
                // function body
            };

        e.g., 
            const add = (a, b) => a + b;

            console.log(add(10, 20));  // Outputs: 30

    4. Anonymous Functions: 
        These are functions without a name and are typically used where a function is passed as an argument or executed immediately.

        e.g.,
            setTimeout(function() {
                    console.log("This message is shown after 3 seconds");
            }, 3000);

    5. Immediately Invoked Function Expressions (IIFE): 
        An IIFE is a function that runs as soon as it is defined. It’s commonly used to create a private scope and avoid polluting the global namespace.

        syntax: 
            (function() {
                console.log("This function runs immediately!");
            })();


    6. Higher-Order Functions: 
        A higher-order function is a function that takes another function as a parameter or returns a function.

        e.g., 
            function greet() {
                return function(name) {
                    return `Hello, ${name}!`;
                };
            }

            const greeter = greet();
            console.log(greeter("Nitesh"));  // Outputs: Hello, Nitesh!

    7. Callback function: 
        A callback function is a function passed into another function as an argument. It is executed after some operation is completed, making it essential for handling asynchronous tasks, like fetching data from an API.

        e.g., 
            function fetchData(callback) {
                setTimeout(() => {
                    console.log("Data fetched!");
                    callback();
                }, 2000);
            }

            function displayData() {
                console.log("Displaying data...");
            }

            fetchData(displayData);  // Outputs: Data fetched! then Displaying data...

    
------------------------------------------------------------------------------------------------

Default Parameters
    In ES6, JavaScript introduced default parameters, allowing parameters to have a default value if no argument is provided.

    e.g., 
        function greet(name = 'Guest') {
            return `Hello, ${name}!`;
        }

        console.log(greet());  // Outputs: Hello, Guest!
        console.log(greet('Nitesh'));  // Outputs: Hello, Nitesh!

Rest Parameters
    Rest parameters allow you to pass an indefinite number of arguments as an array.

    e.g., 
        function sum(...numbers) {
            return numbers.reduce((total, number) => total + number, 0);
        }

        console.log(sum(1, 2, 3, 4));  // Outputs: 10


------------------------------------------------------------------------------------------------
Scope 
    The context in which variables are declared and can be accessed.

Global Scope 
    Variables declared outside of any function, accessible only within that function 

Local Scope 
    Variables declared within a function, accessible only within that function.

e.g., 

    // --------------------------------------------------------
    // The following variables are defined in the global scope
    // const num1 = 20;
    // const num2 = 3;
    // const name = "Chamakh";

    //         // This function is defined in the global scope
    //         function multiply() {
    //             return num1 * num2;
    //         }

    //         console.log(multiply()); // 60

    //         // A nested function example
    //         function getScore() {
                    // Variables declared in the local scope
        //         const num1 = 2;
        //         const num2 = 3;
                
    //         function add() {
    //             return `${name} scored ${num1 + num2}`;
    //         }
            
    //         return add();
    //         }

    //         console.log(getScore()); // "Chamakh scored 5"
    // --------------------------------------------------------


// **********************************************************
    // Argument Object in JS -

    // 1.
        // function sum(a,b){
        //     return a+b;
        // }

        // console.log(sum(1,2));
        // console.log(sum(1));
        // console.log(sum());
        // console.log(sum(1,2,3,4,5)); //returns 3
        
    // 2.
        // function sum(a,b){
        //     console.log(arguments);
        //     return a+b;
        // }
        
        // let ans = sum(1,2,3,4,5);
 
    // 3. 
        // function sum(a,b){
        //     let total = 0;
        //     for(let value of arguments)
        //         total+=value;
        //     return total;
        // }
        
        // let ans = sum(1,2,3,4,5);
        // console.log(ans);