4. useReducer - 
    a. The useReducer hook is an alternative to useState hook for managing complex state logic in React.
    b. It is particularly useful when:
        1. State logic involves multiple sub-values.
        2. The next state depends on the previous state.
        3. You want to group state updates logically (like Redux).


    Syntax: useReducer 
        
        const [state, dispatch] = useReducer(reducer, initialState);

        where,
            1. state - Holds the current state value.
            2. dispatch - A function to trigger state updates.
            3. reducer - A function that determines the next state based on the current state and an action.
            4. initialState - The starting value of the state.

    
    Example: Counter App using useReducer:

    1. Define the reducer function 

    const counterReducer = (state, action) => {
        switch (action.type) {
            case "INCREMENT":
                return {count: state.count + 1};
            
            case "DECREMENT": {
                return {count: state.count - 1};
            }

            case "RESET": {
                return {count: 0}
            }

            default: 
                return state;
        }
    };

