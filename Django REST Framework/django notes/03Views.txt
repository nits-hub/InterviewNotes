TYPES OF VIEWS - 
    1. Function-Based Views(FBVs)
    2. Class-Based Views(CBVs)
    3. Generic Views
    4. ViewSets and Routers for simplified CRUD operations.


1. Function Based Views - 
    a. Function-based views allow you to define your API logic using simple Python functions.
    
    Key Featurs - 
    a. Easy to understand and straightforward.
    b. Each HTTP method (GET, POST, etc.) is explicitly handled in the function.
    e.g., 
        from rest_framework.decorators import api_view
        from rest_framework.response import Response

        @api_view(['GET', 'POST'])
        def example_view(request):
            if request.method == 'GET':
                data = {"message": "Hello, this is a GET request"}
                return Response(data)

            elif request.method == 'POST':
                data = {"message": "Hello, this is a POST request"}
                return Response(data)
    use cases:
        1. Best for simple APIs.
        2. Easy to grasp for beginners.
        3. Good for prototypes or small, isolated functions.

2. Class-Based Views in Django
    1. Class-Based Views (CBVs) in Django provide an object-oriented approach to handling HTTP requests, offering reusable and modular components for building views.
    2. Unlike function-based views (FBVs), which are defined as functions, CBVs encapsulate logic within classes and use methods to handle different HTTP request types.

    Advantages - 
        1. Code Reusability: CBVs allow you to reuse common patterns by extending base classes like View, TemplateView, ListView, and DetailView.
        2. Separation of Concerns: CBVs split logic across methods, such as get(), post(), etc., which enhances readability and maintainability.
        3. Customizability: You can easily override or extend base methods to fit specific use cases.

    Common Class-Based Views:
    1. View: 
        a. The most basic CBV. 
        b. It serves as the foundation for all other CBVs and can be customized by overriding its methods like get() and post().

            There are other types also, but are used in conjuction with frontend of django.

    Examples of CBV:
    1. Basic View example -
        from rest_framework.views import APIView
        from rest_framework.response import Response 

        class MyView(View):
            def get(self, request):
                return Response({"message": "This is a GET request"})

            def post(self, request):
                return Response({"message": "This is a POST request"})
    

3. GENERIC VIEWS:
    a. DRF's generic views provide pre-built functionality for common patterns (e.g., listing, retrieving, creating, updating, and deleting objects).
    b. They are built on top of Class-Based View.

    Types of Generic Views:
        a. ListAPIView:                  To retrieve a list of objects from the database.(*only supported in GET method, **creation of object is not allowed)
        b. RetrieveAPIView:              To retrieve a single object. 
        c. CreateAPIView:                To create a new object.
        d. UpdateAPIView:                To update an existing object.
        e. DestroyAPIView:               To delete an object.
        f. ListCreateAPIView:            Combines listing and creation.(*supported in both GET and POST methods, and creation of list is also allowed)
        g. RetrieveUpdateDestroyAPIView: To retrieve, update, or delete a single object.

    1. ListAPIView -  
        a. useD with HTTP method GET.
        b. usecase: When you want to return all objects or a filtered subset of objects.

        e.g., 
            from rest_framework.generics import ListAPIView
            from myapp.models import Post
            from myapp.serializers import PostSerializer

            class PostListView(ListAPIView):
                queryset = Post.objects.all()
                serializer_class = PostSerializer
        
    2. RetrieveAPIView - 
        a. used with GET method.
        b. use case: When you want to fetch details of a specific object.

        e.g., 
            from rest_framework.generics import RetrieveAPIView
            from myapp.models import Post
            from myapp.serializers import PostSerializer

            class PostDetailView(RetrieveAPIView):
                queryset = Post.objects.all()   #It automatically fetches the data based on the key available in the url 
                serializer_class = PostSerializer

    3. CreateAPIView - 
        a. used with POST method.
        b. usecase: When you need to add new data to the database.

        e.g., 
            class PostCreateView(CreateAPIView):
                queryset = Post.objects.all()
                serializer_class = PostSerializer
    
    4. UpdateAPIView - 
        a. used with put, patch methods.
        b. use case: When you need to modify the data of an existing object.

        e.g, 
            class PostUpdateView(UpdateAPIView):
            queryset = Post.objects.all()
            serializer_class = PostSerializer

    5. DestroyAPIView - 
        a. used with delete method.
        b. When you need to remove the data from the database.

        e.g., 
            class PostDeleteView(DestroyAPIView):
                queryset = Post.objects.all() 

    6. ListCreateAPIView - 
        a. used with get, post methods.
        b. use case: When you need both retrieval and creation in a single endpoint.

        e.g.,
            class CommentListCreateView(ListCreateAPIView):
                queryset = Comment.objects.all()
                serializer_class = CommentSerializer

    7. RetrieveUpdateDestroyAPIView -
        a. used with get, post, put, delete methods.
        b. When you want to retrieve, update, or delete a single object from the database.

        e.g., 
            ---------------
            ---------------



4. VIEWSETS and Routers: 
    Viewsets -
        1. A Viewsets is a class-based abstraction that combines the logic for multiple views (like ListAPIView, RetrieveAPIView etc.) into one class.
        2. Instead of defining separate views for each HTTP method (GET, POST, etc.), ViewSet manages all operations in a single class.

        Types of Viewsets:
            1. ModelViewSet: 
                a. Most commonly used.
                b. Provides complete CRUD functionality.
                c. Maps directly to a Django model.

            2. ReadOnlyModelViewSet: 
                a. Provides read-only operations (list and retrieve).
                b. Useful for APIs where data shouldn't be modified.

            3. Custom ViewSet:
                a. Allows defining custom logic for specific actions.


            Example of Viewsets
                from rest_framework.viewsets import ModelViewSet
                from .models import ExampleModel
                from .serializers import ExampleModelSerializer

                class ExampleViewSet(ModelViewSet):
                    queryset = ExampleModel.objects.all()
                    serializer_class = ExampleModelSerializer
    Routers - 
        1. DefaultRouter - 
            a. Generates standard routes for ViewSets.
            b. Adds a root API endpoint for navigation.
        
        2. SimpleRouter - 
            a. Similar to DefaultRouter but without the root API endpoint.
        
        3. Custom Routers: 
            a. Extend DRF's SimpleRouter to create your own routing logic.
    
    How VIEWSETS and ROUTERS work together:
        When you pair a ViewSet with a Router:
        1. The ViewSet defines the logic for handling requests (e.g., listing, creating, retrieving, updating, deleting).
        2. The Router generates the URL patterns for these actions automatically.

    
    e.g., 1 - Basic CRUD with ModelViewSet and DefaultRouter

    Model: 
        from django.db import models

        class Book(models.Model):
            title = models.CharField(max_length=255)
            author = models.CharField(max_length=255)
            published_date = models.DateField()
            isbn = models.CharField(max_length=13, unique=True)

            def __str__(self):
                return self.title

    Serializer: 
        from rest_framework import serializers
        from .models import Book

        class BookSerializer(serializers.ModelSerializer):
            class Meta:
                model = Book
                fields = '__all__'

    ViewSet:
        from rest_framework.viewsets import ModelViewSet
        from .models import Book
        from .serializers import BookSerializer

        class BookViewSet(ModelViewSet):
            queryset = Book.objects.all()
            serializer_class = BookSerializer


    Router: 
        from rest_framework.routers import DefaultRouter
        from .views import BookViewSet

        router = DefaultRouter()
        router.register(r'books', BookViewSet)  # Register the ViewSet with the router

        urlpatterns = router.urls  # Automatically generates URL patterns


    Generated Endpoints:
    HTTP        Method	        URL	Action
    GET	        /books/	        List all books
    POST	    /books/	        Create a new book
    GET	        /books/<id>/	Retrieve a book
    PUT	        /books/<id>/	Update a book
    PATCH	    /books/<id>/	Partially update a book
    DELETE	    /books/<id>/	Delete a book


    